{"mappings":"YAAA,IAAMA,EAAaC,SAASC,cAAc,SACpCC,EAAgBF,SAASC,cAAc,UACvCE,EAAM,GACZJ,EAAWK,iBAAiB,SAC5B,SAAkBC,GAChBF,EAAIE,EAAMC,OAAOC,MAAQF,EAAMC,OAAOE,K,IAExCN,EAAcE,iBAAiB,SAE/B,SAAqBC,GACnBA,EAAMI,iBAC0BN,EAAxBO,OAAwBP,EAAhBQ,MAAgBR,EAATS,KACTT,EAAIO,OAAQP,EAAIQ,MAIxBE,EAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,SAACC,EAASC,GACtCC,YAAW,WACPN,EACFI,EAAQ,6CAERC,EAAO,yC,GAEJf,EAAIQ,M,IATX,IACQE,C","sources":["src/js/03-promises.js"],"sourcesContent":["const delayInput = document.querySelector('.form');\nconst promiseButton = document.querySelector('button');\nconst obj = {};\ndelayInput.addEventListener(\"input\", inputObj);\nfunction inputObj(event) {\n  obj[event.target.name] = event.target.value;\n};\npromiseButton.addEventListener(\"click\", formHandler);\n\nfunction formHandler(event) {\n  event.preventDefault();\n  const { amount, delay, step } = obj;\n  createPromise(obj.amount, obj.delay)\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n  if (shouldResolve) {\n    resolve(\"Success! Value passed to resolve function\");\n  } else {\n    reject(\"Error! Error passed to reject function\");\n  }\n    }, obj.delay);\n});\n}\n"],"names":["$ce04d3a99e08e73b$var$delayInput","document","querySelector","$ce04d3a99e08e73b$var$promiseButton","$ce04d3a99e08e73b$var$obj","addEventListener","event","target","name","value","preventDefault","amount","delay","step","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.fd794079.js.map"}